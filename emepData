#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Open Source EMEP/MSC-W model
simplified access to the source code, input data and benchmark results.
"""

_CONST={'VERSION':"0.0.1",'LASTREL':"rv4.8",'LASTMET':2013,
  'FTP':"ftp://ftp.met.no/projects/emep/OpenSource",
  'TMPDIR':"./downloads",'DATADIR':'.'}


class fileSize(int):
  """Human readable file size"""
  def __new__(cls, value):
    return int.__new__(cls,max(value,0))  # only positive values make sence
  def __repr__(self):
    return "%d%s"%(self*4,'b')            # show in bites
  def __str__(self):                      # show K/M/G/T bytes
    """ derived from http://stackoverflow.com/a/1094933/2576368"""
    num=float(self)
    for unit in ['B','K','M','G']:
      if num < 1024.0:
        return "%3.1f%s"%(num, unit)
      num /= 1024.0
    return "%.1f%s"%(num, 'T')

class dataPoint(object):
  '''Info and retrieval/check methods'''

  def __init__(self,release,key,year,model,src,dst='',byteSize=0,cksum=None):
    '''Initialize object'''
    self.release= int(release)        # release date (YYYYMM)
    self.key    = str(key)
    try: 
      self.tag  = {'other':'{KEY}{REL}',
                   'meteo':'{KEY}{YEAR}'}[self.key]
    except:
      self.tag  = '{MOD}{KEY}'      # eg 'rv4_8source'
    try:
      self.year = int(year)           # met-year
    except:
      self.year = None
    try:
      self.model= str(model)          # model version
    except:
      self.model= None
    self.src    = str(src)            # single source url/file
    self.dst    = str(dst)            # path for uncompressed self.dst
    if len(self.dst)==0:
      self.dst= '{TMPDIR}/{TAG}'
    self.size   = fileSize(byteSize)  # self.src file size [bytes]
    self.cksum  = cksum               # self.src checksum
    if self.cksum:
      self.cksum= int(self.cksum)

    # replace keywords
    self.tag = self.tag.format(REL=self.release,KEY=self.key,YEAR=self.year,MOD=self.model)
    self.src = self.src.format(REL=self.release,TAG=self.tag,**_CONST)
    self.dst = self.dst.format(REL=self.release,TAG=self.tag,**_CONST)

  def __str__(self):
    return "%s (%s) --> %s"%(self.tag,self.size,self.dst)
#   return "%s %s --> %s"%(self,self.src,self.dst)
  def __repr__(self):
    return "%s (%s)"%(self.tag,self.size)

  def __hash__(self):
    '''find unique self.src occurences'''
    return hash(repr(self.src))
  def __eq__(self, other):
    if isinstance(other, dataPoint):
      return (self.src == other.src)
    else:
      return False
  def __ne__(self, other):
    return (not self.__eq__(other))

class dataSet(object):
  '''Info and retrieval/check methods'''

  def __init__(self,tag,release,year,status,dataset=None,byteSize=None):
    '''Initialize object'''
    self.tag    = str(tag)            # revision tag
    self.release= int(release)        # release date (YYYYMM)
    self.year   = year                # met-year(meteo)/status-year(model)
    self.status = status              # Status report
    self.dataset= dataset             # {'input':input,'meteo':meteo,..}
    self.size   = 0
    if byteSize:
      self.size = byteSize or 0
    else:
      self.size = sum([x.size for _,x in self.dataset.items() if hasattr(x,"size")])
    self.size = fileSize(self.size)

  def __str__(self):
    return "%-8s (meteo:%s, status:%s)"%(self.tag,self.year,self.status)
  def __repr__(self):
    return "%s: %s"%(self,{k:"%s"%v for k,v in self.dataset.items() if v})
#   return "%s: %s"%(self,self.dataset)

def readCatalog(filename,verbose):
  '''
  Returns releases read from catalog csv-file

  Definitions
    dataPoint(class): single remote file/tarfile
    dataSet(class):   dataPoints from a model release,
                      sorted into meteo|input|output|source|docs
    catalog(list):    all dataPoints
    index(dict):      catalog sorted into meteo|input|output|source|docs
    archive(list):    all dataSet
  '''
  from os.path import isfile
  from csv import reader as csvreader
  
  if(not isfile(filename)):
    return []
  reader = csvreader(open(filename),delimiter=',')
  next(reader)    # skip header

  catalog = []
  rels,keys = set(),set()  # unique dataPoint.release/.keys for index(dict)
  if verbose>2:
    print("Reading %s"%filename)
  for row in reader:
    if row and "".join(row).strip():
      try:
        catalog+=[dataPoint(*row)]
        rels.add(catalog[-1].release)
        keys.add(catalog[-1].key)
        if verbose>2:
          print("  %s"%catalog[-1])
      except:
        print("Failed to parse (%s):%r\n"%(filename,row))
        print(dataPoint(*row))
        raise
  if verbose>1:
    print("%s read(srcs:%d)"%(filename,len(catalog)))
    
  if verbose>2:
    print("Indexing")
  index=dict.fromkeys(rels)
  for r in rels:
    index[r]=dict.fromkeys(keys)
    for k in keys:
      index[r][k]=[x for x in catalog if (x.release==r)and(x.key==k)]
      if verbose>2:
        print("  index[%s][%s](srcs:%d)"%(r,k,len(index[r][k])))
  if verbose>1:
    print("%s index[release:%d][sets:%d]"%(filename,len(rels),len(keys)))

  if verbose>2:
    print("Compiling releases")
  for r,v in index.items():
    index[r]=dataSet(v['source'][0].model,r,v['meteo'][0].year,v['source'][0].year,v)
    if verbose>2:
      print("  index[%s]: %s"%(r,index[r]))
  if verbose>1:
    print("%s index(release:%d)"%(filename,len(rels)))

  return index

def parse_arguments():
  from optparse import OptionParser,OptionGroup
  from sys      import argv as args

  usage = """usage: %prog [options]

Examples:

  Retrieve release dataset for revision REV ({REV})
    %prog -R REV          

  Get Only the source code and user guide for revision REV
    %prog -R REV -sd

  Download meteorological input for YEAR ({MET})
    %prog -Y YEAR -m
""".format(
  REV="|".join(['rv3','v201106','rv4_0','rv4_3','rv4_4','rv4_5','rv4_8']),
  MET="|".join(['2005','2008','2010..%d'%_CONST['LASTMET']]))

  parser = OptionParser(usage,version=_CONST['VERSION'])
  parser.set_defaults(verbose=1)
  parser.add_option("-q", "--quiet",
    action="store_false", dest="verbose",
    help="don't print status messages to stdout")
  parser.add_option("-v", "--verbose",
    action="count", dest="verbose",
    help="Increase verbosity")

  group = OptionGroup(parser, "Release options",
    "Select a release dataset")
  group.add_option("-R","--revision",
    type="string", metavar="REV",
    action="store", dest="tag",
    help="revision REV")
  group.add_option("-S","--status",
    type="int", metavar="YEAR",
    action="store", dest="status",
    help="YEAR's status report")
  group.add_option("-Y","--year",
    type="int", metavar="YEAR",
    action="store", dest="year",
    help="Meteorological/run YEAR")
  parser.add_option_group(group)

  group = OptionGroup(parser, "Dataset options",
    "Get parts of a release dataset")
  group.add_option("-m", "--meteo", const="meteo",
    action="append_const", dest="data",
    help="get meteorology input")
  group.add_option("-i", "--input", const="input",
    action="append_const",dest="data",
    help="get other input")
  group.add_option("-o", "--output",const="output",
    action="append_const", dest="data",
    help="get model benckmark")
  group.add_option("-s", "--source",const="source",
    action="append_const", dest="data",
    help="get source code for benckmark")
  group.add_option("-d", "--docs",const="docs",
    action="append_const", dest="data",
    help="get corresponding user guide")
  parser.add_option_group(group)
 
  opts,args = parser.parse_args(args[1:])
  if(all(getattr(opts,attr) is None for attr in ['tag','status','year'])):
    opts.tag=_CONST['LASTREL']
  if(opts.data==None):
    opts.data=["meteo","input","output","source","docs"]
  
  return opts,args

if __name__ == "__main__":
  import sys
  opts,args = parse_arguments()
 
  catalog=readCatalog('catalog.csv',opts.verbose)

"""
  for attr in ['tag','status','year']:
    target=getattr(opts,attr)
    if(target is None):
      continue

    if opts.verbose>1:
      print("Searching %s:%s"%(attr,target))
    try:
      dataSet=[getattr(x,attr) for x in OpenSource].index(target)
      dataSet=OpenSource[dataSet]
    except:
      print("No datasets found for --%s=%s"%(attr,target))
      sys.exit(-1)
    if opts.verbose>1:
      print("  Found %s"%dataSet)

    if opts.verbose>1:
      print("Searching datasets:%s"%(opts.data))
    try:
      dataSet=dataSet.dataset
      dataSet={key:dataSet[key] for key in opts.data}
    except:
      print("No datasets found for --%s=%s"%(attr,target))
      sys.exit(-1)
    if opts.verbose>1:
      for key in dataSet:
        print("  Found %-6s:%s"%(key,dataSet[key]))

    if opts.verbose:
      print("From %s:%s will retrieve:"%(attr,target))
      for key in dataSet:
        print("  %-6s:%r"%(key,dataSet[key]))
""" 
